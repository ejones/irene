{"name":"Irene","body":"If you're building a \"rich\" web app with multiple client-side resources, and you're aiming for, say, the [Best Practices for Speeding Up Your Web Site](http://developer.yahoo.com/performance/rules.html), you're probably going to use one or more CSS or JavaScript minifiers, perhaps a client-side templating library, and a build script or two or perhaps a server-side \"asset pipeline\" to wrap it all together.\r\n\r\nIrene is a small tool that simplifies things by picking up resources' dependencies on other resources (say, a JavaScript file on a JavaScript utility file), calling an appropriate minifier/\"compiler\", and bundling it all together for (ideally) a single download for the browser. The dependencies are listed at the top of a file, so it doesn't require any build scripts or anything. It also adds project scaffolds and a development reloader.\r\n\r\nSource files are processed as follows:\r\n\r\n* **CSS** files are processed with [Google Closure Stylesheets](http://code.google.com/p/closure-stylesheets/)\r\n* **templates (.soy)** are processed with [Google Closure (Soy) Templates](https://developers.google.com/closure/templates/)\r\n* **JavaScript** files are processed with the [Google Closure Compiler](https://developers.google.com/closure/compiler/)\r\n\r\n\r\n## Quick Start\r\n\r\nIrene runs on the JVM. Pick up the [latest jar](https://github.com/downloads/ejones/irene/irene-latest.jar) and run:\r\n\r\n    java -jar irene-latest.jar create hello\r\n\r\nThis is a shorthand for \"create basic hello\", i.e., create a project called \"hello\" with the \"basic\" template. You will get a project that looks like:\r\n\r\n    +-hello/\r\n      +-hello.css\r\n      +-hello.soy\r\n      +-hello.js\r\n      +-hello.html\r\n\r\nPoke around if you want, and then run the following to build:\r\n\r\n    java -jar irene-latest.jar hello\r\n\r\nThen check out the result by opening ``hello/hello.min.html``.\r\n\r\n\r\n## When does it make sense?\r\n\r\nIrene bundles the dependencies of an HTML page or JavaScript library together into a single download. This makes the most sense for rich web apps where a page is downloaded once and cached for several future loads. The action happens in data API calls originating from JavaScript (i.e., AJAX or Comet heavy).\r\n\r\nHere's a typical resource flow. This is what the first request from the browser looks like:\r\n\r\n      |                                                         |\r\n    B |   GET /static/main.min.html                             | S\r\n    R | ------------------------------------------------------> | E\r\n    O | <------------------------------------------------------ | R\r\n    W |   200 OK                                                | V\r\n    S |   ...                                                   | E\r\n    E |   <html>(all resources req'd for main.html)</html>      | R\r\n    R |                                                         |\r\n      |                                                         |\r\n      |   GET /app/load_data                                    |\r\n      | ------------------------------------------------------> |\r\n      | <------------------------------------------------------ |\r\n      |   200 OK                                                |\r\n      |   ...                                                   |\r\n      |   { \"data\": ... }                                       |\r\n \r\nAnd here's each subsequent request, if the user doesn't hit \"refresh\", etc.:\r\n\r\n      |                                                         |\r\n    B |   GET /static/main.min.html                             | S\r\n    R | -----------.                                            | E\r\n    O | <----------'                                            | R\r\n    W |   (from cache)                                          | V\r\n    S |   ...                                                   | E\r\n    E |   <html>(all resources req'd for main.html)</html>      | R\r\n    R |                                                         |\r\n      |                                                         |\r\n      |   GET /app/load_data                                    |\r\n      | ------------------------------------------------------> |\r\n      | <------------------------------------------------------ |\r\n      |   200 OK                                                |\r\n      |   ...                                                   |\r\n      |   { \"data\": ... }                                       |\r\n      |                                                         |\r\n\r\nThat is, for subsequent requests, the server only sees the (small) API calls.\r\n\r\n\r\n## How does it work?\r\n\r\nIrene picks up file dependencies in two ways depending depending on the filetype. For HTML, it treats any `<script>` or `<link>` tag that points to a valid local file as a compilable dependency. For the other types (.css, .js, .soy), it looks for the [JSDoc](http://code.google.com/p/jsdoc-toolkit/) tag \"requires\", when it is surrounded by quotes. Here's an example:\r\n\r\n```js\r\n/**\r\n * @fileoverview Drives the user profile.\r\n * @requires \"util.js\"\r\n * @requires \"views.soy\"\r\n */\r\n```\r\n\r\nIn this way, HTML may depend on .css and .js files, CSS on other .css, JavaScript on .js or .soy, and Soy on other .soy.\r\n\r\nWhen you give `irene-latest.jar` a directory as its argument (or none, indicating the current directory), it recurses on the files in that directory and subdirectories, processing files that match:\r\n\r\n* *.html\r\n* main.js\r\n* DIR.js\r\n\r\nWhere DIR would be the file's parent directory.\r\n\r\nThe outputs will appear alongside the originals with \".min.\" inserted before their extensions. For example, the basic scaffold we created above will look like this after compilation:\r\n\r\n    +-hello/\r\n      +-hello.css\r\n      +-hello.min.css\r\n      +-hello.soy\r\n      +-hello.min.soy\r\n      +-hello.js\r\n      +-hello.min.js\r\n      +-hello.html\r\n      +-hello.min.html\r\n\r\nThe intermediate \".min.\" files are kept around to speed up compilation (resources are only recompiled when they've been modified later than a target). It's best to add \"*.min.*\" to your .gitignore or .hgignore files.\r\n\r\n\r\n### But what about large external libraries?\r\n\r\nAs a compromise, any dependencies that contain \".min.\", like \"jquery-latest.min.js\", are ignored.\r\n\r\n\r\n## Other goodies\r\n\r\n### Last Modified\r\n\r\nIrene will expose a variable called `$LAST_MODIFIED` in JavaScript, which is the modification time of the currently executing file (JavaScript or HTML page). Using this, your app server can, if you choose, instruct the browser to permanently cache any files containing JavaScript, and on the *first* API call that the JavaScript makes, it will send it the current modification time of the file that's supposed to be executing. If this timestamp is later than \"$LAST_MODIFIED\", the JavaScript can force a reload using `window.refresh(true)`.\r\n\r\n### Development Recompiler\r\n\r\nUsing the \"develop\" command, Irene will stick around after compilation and continually recompile whenever source files or dependencies change. In our example above, we would run:\r\n\r\n    java -jar irene-latest.jar develop hello\r\n\r\n\r\n## How does it compare to XXX?\r\n\r\nThere are tools like [plovr](http://plovr.org/) and [Web Resource Optimizer for Java](http://code.google.com/p/wro4j/) that do similar things in grouping files and minification steps. Irene is, I think, unique in bundling the [Closure Tools](https://developers.google.com/closure/), not requiring a separate build script/manifest, and bundling the result right into the final HTML.\r\n\r\n## Contributing\r\n\r\nAfter cloning the [Git repository](https://github.com/ejones/irene), you will need to use [sbt](https://github.com/harrah/xsbt/wiki) to work on the project.\r\n\r\n\r\n----------\r\nCopyright (C) 2012 by Evan Jones. Licensed under the MIT License - see LICENSE.txt for details.\r\n","tagline":"A build tool that simplifies high-performance web sites.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}